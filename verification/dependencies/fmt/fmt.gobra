// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package fmt

import . "github.com/scionproto/scion/verification/utils/definitions"

// SIF: I couldn't encode low(format) && forall i :: low(v[i]) ==> low(res),
// so (at least for now) this uses pre- and postcondition.
// SIF: This precondition might not be complete.
// - We might want to require low(len(v)) or something similar, tho
// `format` should already prescribe how many values are used
requires low(format)
// SIF: I can't use `slices.LowBytes` here, as the slice is implicitly created
// and thus I cannot fold the predicate.
requires forall i int :: { &v[i] } 0 <= i && i < len(v) ==> acc(&v[i], R55) && low(v[i])
ensures forall i int :: { &v[i] } 0 <= i && i < len(v) ==> acc(&v[i], R55)
// TODO:
// The following precondition cannot be adequately captured in Gobra.
// preserves forall i int :: 0 <= i && i < len(v) ==> definitions.IsOfPrimitiveType(v[i])
ensures low(res)
decreases _
func Sprintf(format string, v ...interface{}) (res string)

type Stringer interface {
	pred Mem()
	pred LowMem()  // SIF: allows specifying sensitivity (preconditions)

	requires acc(Mem(), 1/2) && acc(LowMem(), 1/2)
	ensures acc(Mem())
	decreases
	String() string
}
