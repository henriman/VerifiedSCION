// Minimal working example 2.
package mwe

// Used to track position in protocol.
type Place int
pred token(ghost p Place)

pred RecvPerm(ghost p Place)

// Returns the next place after calling `Recv` from `p`.
// Avoids using an existential quantifier.
ghost
decreases
pure func Recv_T(ghost p Place) Place

// Used to refer to the received message.
ghost
decreases
pure func Recv_R(ghost p Place) int

// This is how the state is/should be updated after receiving message `m`.
decreases
pure func Recv_S(s state, m int) state {
    return state { key: s.key, lastMsg1: m, lastMsg2: s.lastMsg1, lastMsg3: s.lastMsg2 }
}

requires token(p) && RecvPerm(p)
ensures token(next_p) && next_p == Recv_T(p)
ensures m == Recv_R(p)
ensures low(m) 
func Recv(ghost p Place) (ghost next_p Place, m int)

pred SendPerm(ghost p Place, t int)

ghost
decreases
pure func Send_T(ghost p Place, t int) Place

requires token(p) && SendPerm(p, t)
requires low(t)
ensures token(next_p) && next_p == Send_T(p, t)
func Send(ghost p Place, t int) (ghost next_p Place)

pred DeclassifyPerm(ghost p Place, tag int, t int)

ghost
decreases
pure func Declassify_T(ghost p Place, tag int, t int) Place

ghost
requires token(p) && DeclassifyPerm(p, tag, t)
requires low(tag)
ensures token(next_p) && next_p == Declassify_T(p, tag, t)
ensures low(t)
decreases
func Declassify(ghost p Place, tag int, t int) (ghost next_p Place)

// "Linear" protocol.
pred Protocol1(ghost p0 Place, key int) {
    // 1. Receive a message.
    RecvPerm(p0) && let p1, m := Recv_T(p0), Recv_R(p0) in
    // 2. Compute MAC tag and declassify it.
    let tag := MAC(key, m) in
    DeclassifyPerm(p1, m, tag) && let p2 := Declassify_T(p1, m, tag) in
    // 3. Send MAC tag over network.
    SendPerm(p2, tag) && let p3 := Send_T(p2, tag) in
    // 4. Restart.
    Protocol1(p3, key)
}

type state struct {
    key int // the private key
    lastMsg1 int // 1st most recently received message
    lastMsg2 int // 2nd 
    lastMsg3 int // 3rd 
}

pred Protocol2(ghost p0 Place, s0 state) {
    // Receive a message at any time.
    RecvPerm(p0) && 
    let p1, s1 := Recv_T(p0), Recv_S(s0, Recv_R(p0)) in Protocol2(p1, s1) &&
    // NOTE: at the moment we can declassify things before receiving anything
    // Declassify and send either the MAC tag of the most or the 2nd most 
    // recently received message.
    let tag1, tag2 := MAC(s0.key, s0.lastMsg1), MAC(s0.key, s0.lastMsg2) in

    DeclassifyPerm(p0, s0.lastMsg1, tag1) && 
    let p1 := Declassify_T(p0, s0.lastMsg1, tag1) in Protocol2(p1, s0) &&

    DeclassifyPerm(p0, s0.lastMsg2, tag2) && 
    let p1 := Declassify_T(p0, s0.lastMsg2, tag2) in Protocol2(p1, s0) &&

    SendPerm(p0, tag1) && 
    let p1 := Send_T(p0, tag1) in Protocol2(p1, s0) &&

    SendPerm(p0, tag2) && 
    let p1 := Send_T(p0, tag2) in Protocol2(p1, s0)
}

// Abstract function representing the computation of a MAC.
// key x message -> MAC tag
decreases
pure func MAC(int, int) int

requires token(p0) && Protocol2(p0, s)
func authenticate(ghost p0 Place, s state) {

    invariant token(p0) && Protocol2(p0, s)
    for {
        unfold Protocol2(p0, s)
        // ghost p1 := Recv_T(p0)
        p1, m1 := Recv(p0)
        s = Recv_S(s, m1)

        unfold Protocol2(p1, s)
        // ghost p2 := Recv_T(p1)
        p2, m2 := Recv(p1)
        s = Recv_S(s, m2)

        unfold Protocol2(p2, s)
        // ghost p3 := Recv_T(p2)
        p3, m3 := Recv(p2)
        s = Recv_S(s, m3)

        // We can use m2, m3 here. m1 won't work.
        t := MAC(s.key, m3)

        unfold Protocol2(p3, s)
        // ghost p4 := Declassify_T(p3, m3, t)
        ghost p4 := Declassify(p3, m3, t)

        unfold Protocol2(p4, s)
        // ghost p0 = Send_T(p4, t)
        p0 = Send(p4, t)
    }

}